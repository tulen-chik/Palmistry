from config import user_profiles, bot
from bd.user import get_user, add_user, update_user
from bd.mood import get_mood
from utils.keyboard import generate_personality_keyboard, generate_main_menu_keyboard, generate_location_keyboard
import recomendations
import logging
from telebot import types
from models.userDataClass import User_dataclass
from services.google_service import find_nearby_places

def start_handler(message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = get_user(user_id)
    if user is None:
        add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        bot.send_message(user_id, "üåü –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: üåà\n\n1. –ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç\n2. –ê–º–±–∏–≤–µ—Ä—Ç\n3. –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç",
                         reply_markup=generate_personality_keyboard())
    else:
        main_menu(message)

def choose_personality(message):
    user_id = message.chat.id
    personality_choice = message.text
    update_user(user_id, get_mood(name=personality_choice).id)

    if user_id not in user_profiles:
        user_profiles[user_id] = {
            'personality': personality_choice,
            'preferences': {
                'places_rated': 0,
                'favorite_places': [],
                'past_choices': []
            }
        }
    else:
        user_profiles[user_id]['personality'] = personality_choice

    user_profiles[user_id]['preferences']['past_choices'].append(personality_choice)

    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåç", reply_markup=generate_location_keyboard())

def main_menu(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: üçΩÔ∏èüå≥üì∏üõçÔ∏èüèõÔ∏è", reply_markup=generate_main_menu_keyboard())

def start_location_request(message):
    user_id = message.from_user.id
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    location_button = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    keyboard.add(location_button)

    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=keyboard)

def start_location_response(message):
    user_id = message.from_user.id
    latitude = message.location.latitude
    longitude = message.location.longitude

    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
    places = find_nearby_places(latitude, longitude, places_query='')
    logging.warning(places)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profiles[user_id] = {'places': places, 'awaiting_rating': False}
    places = recomendations.recommend_places(User_dataclass(id=0,id_telegram=user_id,mood_id=3,latitude=latitude,longitude=longitude),
                                             places,[""])
    logging.warning(user_profiles)
    suggest_places(user_id, places)

def suggest_places(user_id, places):
    if places:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for place in places[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –º–µ—Å—Ç
            keyboard.add(types.KeyboardButton(place[0]['–Ω–∞–∑–≤–∞–Ω–∏–µ']))

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å:", reply_markup=keyboard)
        user_profiles[user_id]['awaiting_rating'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
    else:
        bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —É–≤–µ—Å–µ–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π —Ä—è–¥–æ–º.")
